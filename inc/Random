#pragma once

#include <Define.h>

#include <random>

namespace tools {
/// @brief Random Number Generator
/// @details Random numbers are generated based on the uniform distribution using a pseudo-random number generator based on the Mersenne Twister method.
/// @note Set the range with range().
/// @note Set the seed with seed().
class Random final
{
private:
    std::mt19937 _mt;
    std::uniform_int_distribution<> _dist;

public:
    /// @brief Constructor
    /// @note Initialize the range from Define::MIN to Define::MAX.
    /// @note Initialize the seed with hardware random number.
    Random()
    {
        using dist_type = std::uniform_int_distribution<>;
        
        // Initialize the generator with Hardware Random Seed
        std::random_device rnd;
        _mt.seed(rnd());

        // Reset the state of normal_distribution.
        _dist.reset();
        
        // Initialize the range from Define::MIN to Define::MAX.
        dist_type::param_type param(Define::MIN, Define::MAX);
        _dist.param(param);
    }

    /// @brief Constructor
    /// @param N the upper bound
    /// @note Initialize the range from 1 to N - 1.
    /// @note Initialize the seed with hardware random number.
    Random(const std::uniform_int_distribution<>::result_type& N)
    {
        using dist_type = std::uniform_int_distribution<>;

        // Initialize the generator with Hardware Random Seed
        std::random_device rnd;
        _mt.seed(rnd());

        // Reset the state of normal_distribution.
        _dist.reset();
        
        // Initialize the range from 1 to N - 1.
        dist_type::param_type param(1u, N - 1u);
        _dist.param(param);
    }

    /// @brief Constructor
    /// @param min the lower bound
    /// @param max the upper bound
    /// @note Initialize the range from min to max.
    /// @note Initialize the seed with hardware random number.
    Random(const std::uniform_int_distribution<>::result_type& min, const std::uniform_int_distribution<>::result_type& max)
    {
        using dist_type = std::uniform_int_distribution<>;

        // Initialize the generator with Hardware Random Seed
        std::random_device rnd;
        _mt.seed(rnd());

        // Reset the state of normal_distribution.
        _dist.reset();
        
        // Initialize the range from min to max.
        dist_type::param_type param(min, max);
        _dist.param(param);
    }

    ~Random() = default;

    /// @brief Reset the param
    /// @details Reset the parameters.
    void reset() { _dist.reset(); }

    /// @brief Return random integer
    /// @details Return random integer such that min() <= N <= max()
    std::uniform_int_distribution<>::result_type operator()() { return _dist(_mt); };

    /// @brief Set the parameters
    /// @details Set the range of the values that can be generated.
    /// @param min The lower bound
    /// @param max The upper bound
    void range(const std::uniform_int_distribution<>::result_type& min, const std::uniform_int_distribution<>::result_type& max)
    {
        using dist_type = std::uniform_int_distribution<>;
        
        // Set the range from min to max.
        _dist.param(dist_type::param_type(min, max));
    }

    /// @brief Set the seed
    /// @details Set the seed for the random number generator
    /// @param seed Seed for the random number generator
    void seed(const uint_fast32_t& seed)
    {
        // Set the seed
        _mt.seed(seed);
    }

    /// @brief Get the upper bound
    /// @details Get the upper bound value that can be generated.
    /// @return The upper bound value
    std::uniform_int_distribution<>::result_type max() { return _dist.max(); };

    /// @brief Get the lower bound
    /// @details Get the lower bound value that can be generated.
    /// @return The lower bound value
    std::uniform_int_distribution<>::result_type min() { return _dist.min(); };
};
} // namespace rnd